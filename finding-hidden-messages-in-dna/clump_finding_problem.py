# -*- coding: utf-8 -*-
"""clump_finding_problem.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I6TKyOm48k9hZbcQY4dgbmeqN8DT-CiL

**Clump Finding Problem:** Find patterns forming clumps in a string.

Input: A string Genome, and integers k, L, and t.

Output: All distinct k-mers forming (L, t)-clumps in Genome.
"""

GENOME_INPUT = "GTGAGCGCCAACCGTTCCAGAACACGTGTGCCTGATACAGGCGACCGGTGCTGTACGACTATTCCGTAGACCGCTGAGACGGATATTTGATCGGTCATTGTAAAACTGACTCCGTTGGTAGAGTATAGGATTAAGGGGAAATGAGGGGAGATTGGGGTGGTAAGAGGGCACCTATATCAGTAATGGTAAGGCGCCCAGCGTACACGAGAAAGGTTACATCTAAGTACTTGGTCATGGGGTCAGATGCAGTATTAGTCCTCCGACACCTGTGAGAAGAGTGTCGGCTCAAAAACCGCCCGCGGCGTCGAAAGTCGCCCGCCTATTACGCCGCCTATTATAAAATTCGGACTCTCTTTGCCTTTTCATTGTGTCAAGCCGGGAACTACTTTCCCTCAGCCGGCAACTGGTCAACTGGTAGGCAACTGGTACCACCGCTCGCTTGTCTGCGATACTAGATTAGGTGGCCGACGCTACCCCCAACCCCGGATTCTGGTGAGGGTTGTCTGCCTAACTTTAGGCGTAGTAAACATAAGTAAACATACCGTACGAGCGAACTAATCCCGTACATCAGTCCCATCCCCTCAGGGAACGCTGTCCTGCTGCAACTATTATTCGTGACGCTAGCGGGAGATCACGGCTCGTTGTCGTACGTTTCGAGTTTGGACCTAAGTAAAAGAGTGCTCTTTCTAGGTGTACAGATGCACGTACTTATACCATTCATAAGACTTTGTGTCAACATGATACCTGGGACGACTCTATAGTGCCGCGATGATGTCAGATGTCAACAACGTCAACTTACCATGTTAGAGGCATCCCGGGGTCCAACCGCGGTAGGTCTAGAGGAGAGGTCTAGATAGAGGTTTAACCTTACGGCGTCATACCACCGCATTCGGTGCCAGACGCTTCCGGTGCAACCCGTAGTAGCTAGTGGCGTAGAGACGCTATGGTCGTCTAAAAGGCAATAGCTTGGGCGATTTGGGCTCGTCTTCTTTATGGGAGAAGTGGATTGGGTGATATACATATGATGATTAATGGAAGTCCAGTAGCGAGTATGGCCACCGGACGGATTTGACTAGTGTGTGTAGATAGCAATGATGCTGATCCCGAGGGCGGTATTGGAACTAATGGAGTGGACGCGGGATACCGCGTGGAACGCGCGTGGAACGAACGGTACGTACGGATACGGGTTAGGGGAACCTTGAGCCGCCGCTTAGTCCTATGGCGGTTCGTAACACGGACCCTAATCGCAGGGACGGTAATCAGGATCCATAACAACCACGTACCCCGAATTCACTGTAGAAAGGACGAGCAGTAGTAGATGTGAATAGTAATGAGACGATGGGGCGGAGGTTTTTGCGAATGAATTCTAGTGGCGCCCAGGTCGGATTTTCGGTCGGATTGACAGTGCCTTTATGATATGAGAAGGAGAAGTATGAGAAGAAGAGCCCGGTCTTGTAGTCCCCTATAACGGCAATGACATTTAGTTAATCTTTTAGGATCTATCAAGGATTAGGTGACGGTAATTTCACACGTCGCCCGTGGTGAGGTGTTTATGTTGCTAAAAACTTGCTTATTCCATGAGCCAGGATTGATATTAAAAAGGCGAAATATTTATCCCTGTCTCGGAACTATATTAATGTCCCAAGACGTTACGCGCAAGCTATTTTCATCATTACCGATTCGGCAACGCGTCCACGTACACGTGGCCACTAGAGCCCCGCAAATCTGTCTAATCTGTCTAATCTGTCTAATCTGTCTAATCTGTCTAATCTGTCTTTCGTTGTGTTCGTTGTGTTCGTTGTGTTCGTTGTGTTCGTTGTGTTCGTTGTG"
K = 9
L = 29 
t = 3

def pattern_count(text, pattern):
  count = 0
  for index in range(0, len(text)):
      current_str = text[index: index + len(pattern)]
      if current_str == pattern:
        count = count + 1
  return count

def t_times_word(text, k, t):
  frequent_pattern = {}
  max_count = 0
  for index in range(len(text)):
    cur_pattern_str = text[index:index+k]
    cur_pattern_count = pattern_count(text, cur_pattern_str)
    frequent_pattern[cur_pattern_str] = frequent_pattern.get(cur_pattern_str,0) + 1
    if frequent_pattern[cur_pattern_str] > max_count:
      max_count = frequent_pattern[cur_pattern_str]
  t_frequent_word = dict((key,value) for key, value in frequent_pattern.items() if value == t) 
  return t_frequent_word.keys()

def clump_finding_problem(genome, k, l, t):    
  index_i = 0
  list_kmers = set()
  while index_i < len(genome):    
    current_gene = genome[index_i: index_i + l] 
    list_kmers.update(t_times_word(current_gene, k, t))
    index_i += 1
  return list_kmers

result = clump_finding_problem(GENOME_INPUT, K,L,t)
print(" ".join(result))